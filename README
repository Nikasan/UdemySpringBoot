Если хотим создавать бины и экземпляры сторонних библиотек, нужно создать класс с аннотацией Configuration
@Configuration
public class FakerConfig {

    @Bean
    public Faker getFaker(){
        return new Faker();
    }

}
 там где необходимо, вызываем через:
 @Autowired
 private Faker faker;
 -------------------------------------------
 Если хотим, чтобы бины создавались, только в момент вызова
 надо пометить класс и место вызова @Lazy. 
 @Component
@Lazy
public class ScreenShotUtil {...
и
    @Lazy
    @Autowired
    private ScreenShotUtil screenShotUtil;
------------------------------------------------
   @ConditionalOnProperty(name = "browser", havingValue = "edge") // read from properties
   не влияет на запуск из командной строки, т.е. неважно что стоит в проперти или по дефолту
   то что укажешь командной строкой то и выполнится
   mvn clean test -Dbrowser=edge
-------------------------------------------------------------------------------------
mvn clean test -D spring.profiles.active=qa,remote
использование спринг профайлов:
используются данные из разных пропертей
-------------------------------------------------------------------------------------   
mvn clean test -D spring.profiles.active=qa,remote -D browser=edge
--------------------------------------------------------------------------------------
Для корректнй работы потоков, надо использовать Thread Scope, вместо prototype, singleton
Минус- закрытие доайвера прерывает весь поток. Не подойдет, если в тесте надо 2 раза создавать(открывать) браузер

mvn clean compile test -D spring.profiles.active=qa -D browser=chrome -D surefire.suiteXmlFile -D surefire.threadCo
unt=threads




